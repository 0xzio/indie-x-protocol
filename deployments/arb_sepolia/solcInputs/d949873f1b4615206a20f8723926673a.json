{
  "language": "Solidity",
  "sources": {
    "contracts/curves/LinearCurve.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"../interfaces/ICurve.sol\";\n\ncontract LinearCurve is ICurve {\n  function getPrice(uint256 supply, uint256 amount, uint256[] memory args) public pure returns (uint256) {\n    uint256 len = args.length;\n    uint256 basePrice = len > 0 ? args[0] : 0.1024 ether;\n    uint256 factor = len > 1 ? args[1] : 100;\n    uint256 sumOfAmount = (_curve(supply + amount) - _curve(supply)) / 1 ether / factor;\n    uint256 sumOfBasePrice = (basePrice * amount) / 1 ether;\n    return sumOfAmount + sumOfBasePrice;\n  }\n\n  function _curve(uint256 x) private pure returns (uint256) {\n    return x * x;\n  }\n}\n"
    },
    "contracts/curves/QuadraticCurve.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"../interfaces/ICurve.sol\";\n\ncontract QuadraticCurve is ICurve {\n  function getPrice(uint256 supply, uint256 amount, uint256[] memory args) public pure returns (uint256) {\n    uint256 len = args.length;\n    uint256 basePrice = len > 0 ? args[0] : 0.1024 ether;\n    uint256 factor = len > 1 ? args[1] : 100_000;\n    uint256 sumOfAmount = (_curve(supply + amount) - _curve(supply)) / 1 ether / 1 ether / factor;\n    uint256 sumOfBasePrice = (basePrice * amount) / 1 ether;\n    return sumOfAmount + sumOfBasePrice;\n  }\n\n  function _curve(uint256 x) private pure returns (uint256) {\n    return x * x * x;\n  }\n}\n"
    },
    "contracts/interfaces/ICurve.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\ninterface ICurve {\n  function getPrice(uint256 supply, uint256 amount, uint256[] calldata args) external view returns (uint256);\n}\n"
    }
  },
  "settings": {
    "viaIR": false,
    "optimizer": {
      "enabled": true,
      "runs": 4294967295
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}